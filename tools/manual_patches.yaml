# This contains a bunch of small fixes specific to certain files that allow the challenges to be compiled in C++

# Format:
# [filename]:
#   '[code to be replaced]': '[replacement]'
#   ...

# Patches that should be applied to all files
all:
  'NULL': 'nullptr'

# Patches specific to the malloc.c lib
malloc.c:
  # Can't cast from void*
  '= pNewChunk;': '= (tMallocAllocHdr *) pNewChunk;'
  'pNext = g_memManager.pFreeList': 'pNext = (tMallocAllocHdr *) g_memManager.pFreeList'

  # Pointer arithmetic not allowed on void*
  # Assuming they use void* in the sense that sizeof(void) == 1
  # Casting to char* instead acheives the same result
  '#define FREE_BLOCK_NEXT( block )    (((tMallocAllocFtr *)((void *)block + (((tMallocAllocHdr *)block)->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)))->pNext)': '#define FREE_BLOCK_NEXT( block )    (((tMallocAllocFtr *)((char *)block + (((tMallocAllocHdr *)block)->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)))->pNext)'
  '#define FREE_BLOCK_PREV( block )    (((tMallocAllocFtr *)((void *)block + (((tMallocAllocHdr *)block)->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)))->pPrev)': '#define FREE_BLOCK_PREV( block )    (((tMallocAllocFtr *)((char *)block + (((tMallocAllocHdr *)block)->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)))->pPrev)'
  'if ( ((void *)pNewChunkHeader + (pNewChunkHeader->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)) != pFreeCurFooter )': 'if ( (tMallocAllocFtr *) ((char *)pNewChunkHeader + (pNewChunkHeader->alloc_size & ~0x3)-sizeof(tMallocAllocHdr)) != pFreeCurFooter )'
  'tMallocAllocHdr *pNeighbor = (pItem + (pItemHdr->alloc_size & ~0x3));': 'tMallocAllocHdr *pNeighbor = (tMallocAllocHdr *) ((char *)pItem + (pItemHdr->alloc_size & ~0x3));'
  '(void *)pItemHdr': '(char *)pItemHdr'
  'pFreeCur +': '(char *) pFreeCur +'
  'pFreeCur+': '(char *) pFreeCur +'
  '(pItem ': '((char *) pItem '
  '(pAllocLocation ': '((char *) pAllocLocation '

# Patches specific to stdlib.c
stdlib.c:
  # Can't cast from void*
  'unsigned char *c = buff;': 'unsigned char *c = (unsigned char *) buff;'
  'heap_manager = mallocPtr;': 'heap_manager = (heap_metadata *) mallocPtr;'

  # Incorrect cast
  '(void *)&': '(void **)&'

  # Use char* for pointer arithmetic instead of void*
  '(void *)(chunkHeader)': '(char *)(chunkHeader)'
  'buf+total_sent': '(char *)buf+total_sent'

  # These functions should use char* instead of void* when incrementing through memory
  'void *memcpy(void *dest, void*src, unsigned int len) {': |
    void *memcpy(void *vdest, void*vsrc, unsigned int len) {
        char *dest = (char *) vdest;
        char *src = (char *) vsrc;

  'void *memset(void *dest, char c, unsigned int len) {': |
    void *memset(void *vdest, char c, unsigned int len) {
        char *dest = (char *) vdest;
